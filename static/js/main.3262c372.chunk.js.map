{"version":3,"sources":["components/Timer/index.jsx","components/Buttons/index.jsx","components/App/index.jsx","index.js"],"names":["Timer","leftTime","minutes","Math","floor","seconds","toString","padStart","Wrapper","Text","styled","div","span","Buttons","startTimer","stopTimer","resetTimer","isRurning","Button","onClick","hoverButton","keyframes","button","App","useState","setLeftTime","title","setTitle","setIsRunning","stopTimeRef","useRef","clearInterval","current","Header","Title","setInterval","h3","h2","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAiBeA,I,MAAAA,EAdf,YAA2B,IAAXC,EAAU,EAAVA,SACRC,EAAUC,KAAKC,MAAMH,EAAS,IAE9BI,GAAWJ,EAAmB,GAARC,GAAYI,WAAWC,SAAS,EAAG,KAE/D,OACE,eAACC,EAAD,WACE,cAACC,EAAD,UAAOP,IACP,cAACO,EAAD,gBACA,cAACA,EAAD,UAAOJ,QAOPG,EAAUE,IAAOC,IAAV,oEAKPF,EAAOC,IAAOE,KAAV,iDCZKC,I,MAAAA,EAVf,YAAiE,IAA/CC,EAA8C,EAA9CA,WAAYC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,UACnD,OACE,eAAC,EAAD,YACIA,GAAa,cAACC,EAAD,CAAQC,QAASL,EAAjB,mBACdG,GAAa,cAACC,EAAD,CAAQC,QAASJ,EAAjB,kBACd,cAACG,EAAD,CAAQC,QAASH,EAAjB,uBAOAR,EAAUE,IAAOC,IAAV,6CAIPS,EAAcC,YAAH,2EAMXH,EAASR,IAAOY,OAAV,qTAaKF,GCaFG,MA7Cf,WAAgB,IAAD,EACmBC,mBAAS,MAD5B,mBACNvB,EADM,KACIwB,EADJ,OAEaD,mBAAS,aAFtB,mBAENE,EAFM,KAECC,EAFD,OAGqBH,oBAAS,GAH9B,mBAGNP,EAHM,KAGKW,EAHL,KAIPC,EAAcC,iBAAO,MAwBrBd,EAAa,WACjBe,cAAcF,EAAYG,SAC1BP,EAAY,MACZE,EAAS,aACTC,GAAa,IAGf,OACE,eAAC,EAAD,WACE,cAACK,EAAD,wBACA,cAACC,EAAD,UAAQR,IACR,cAAC,EAAD,CAAOzB,SAAUA,IACjB,cAAC,EAAD,CAASa,WAjCM,WACU,OAAxBe,EAAYG,UACfH,EAAYG,QAAUG,aAAY,WAChCV,GAAY,SAAAxB,GACV,OAAIA,GAAU,EAAWA,EAAS,GAClCe,IACO,QAER,KACHW,EAAS,uBACTC,GAAa,KAuBsBb,UApBnB,WACW,OAAxBc,EAAYG,UACfD,cAAcF,EAAYG,SAC1BH,EAAYG,QAAU,KACtBL,EAAS,kBACTC,GAAa,KAe4CZ,WAAYA,EAAYC,UAAWA,QAO1FT,EAAUE,IAAOC,IAAV,wKASPuB,EAAQxB,IAAO0B,GAAV,uEAKLH,EAASvB,IAAO2B,GAAV,8FC5DZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3262c372.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport styled from 'styled-components'\r\n\r\nfunction Timer({leftTime}){\r\n  const minutes = Math.floor(leftTime/60);\r\n\r\n  const seconds = (leftTime - minutes*60).toString().padStart(2, '0');\r\n  \r\n  return(\r\n    <Wrapper>\r\n      <Text>{minutes}</Text>\r\n      <Text>:</Text>\r\n      <Text>{seconds}</Text>\r\n    </Wrapper>\r\n  )\r\n};\r\n\r\nexport default Timer;\r\n\r\nconst Wrapper = styled.div`\r\n  display:flex;\r\n  margin-bottom:60px;\r\n`;\r\n\r\nconst Text = styled.span`\r\n  font-size: 150px;\r\n`;","import styled, { keyframes } from 'styled-components'\r\n\r\nfunction Buttons({startTimer, stopTimer, resetTimer, isRurning}){\r\n  return(\r\n    <Wrapper>\r\n      {!isRurning && <Button onClick={startTimer}>Start</Button>}\r\n      {isRurning && <Button onClick={stopTimer}>Stop</Button>}\r\n      <Button onClick={resetTimer}>Reset</Button>\r\n    </Wrapper>\r\n  )\r\n};\r\n\r\nexport default Buttons;\r\n\r\nconst Wrapper = styled.div`\r\n  display:flex;\r\n`;\r\n\r\nconst hoverButton = keyframes`\r\n  to{\r\n    transform: translate(0, -5px)\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  width:100px;\r\n  height:50px;\r\n  background-color: #32a6a8;\r\n  margin-right:10px;\r\n  border:none;\r\n  outline:none;\r\n  border-radius:10px;\r\n  font-family: Indie;\r\n  font-weight: 900;\r\n  font-size: 20px;\r\n  :hover{\r\n    cursor: pointer;\r\n    animation: ${hoverButton} forwards 1s linear;\r\n  }\r\n`;","import styled from 'styled-components'\nimport Timer from '../Timer'\nimport Buttons from '../Buttons'\nimport { useState, useRef } from 'react';\n\nfunction App() {\n  const [leftTime, setLeftTime] = useState(25*60);\n  const [title, setTitle] = useState(\"Let's go!\");\n  const [isRurning, setIsRunning] = useState(false);\n  const stopTimeRef = useRef(null)\n  \n\n  const startTimer = () =>{\n    if(stopTimeRef.current !== null) return;\n    stopTimeRef.current = setInterval(()=>{\n      setLeftTime(leftTime => {\n        if (leftTime>=1) return (leftTime-1);\n        resetTimer();\n        return 0;\n      });\n    }, 1000);\n    setTitle(\"Stop if you want :(\");\n    setIsRunning(true);\n  };\n\n  const stopTimer = () =>{\n    if(stopTimeRef.current === null) return;\n    clearInterval(stopTimeRef.current);\n    stopTimeRef.current = null;\n    setTitle(\"You can go on!\");\n    setIsRunning(false);\n  };\n\n  const resetTimer = () =>{\n    clearInterval(stopTimeRef.current);\n    setLeftTime(25*60);\n    setTitle(\"Let's go!\");\n    setIsRunning(false);\n  };\n  \n  return (\n    <Wrapper>\n      <Header>Pomodoro!</Header>\n      <Title>{title}</Title>\n      <Timer leftTime={leftTime} />\n      <Buttons startTimer={startTimer} stopTimer={stopTimer} resetTimer={resetTimer} isRurning={isRurning} />\n    </Wrapper>\n  );\n}\n\nexport default App;\n\nconst Wrapper = styled.div`\n  height:100vh;\n  background-color: #ed7d7b;\n  display:flex;\n  flex-direction:column;\n  justify-content:center;\n  align-items:center;\n`;\n\nconst Title = styled.h3`\n  font-family: Hachi;\n  font-size: 40px;\n`;\n\nconst Header = styled.h2`\n  font-size:80px;\n  font-family: Hachi;\n  margin-bottom: 20px;\n`;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}